#!/usr/bin/env python

# This file is part of python-libmilter.
# 
# python-libmilter is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# python-libmilter is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with python-libmilter.  If not, see <http://www.gnu.org/licenses/>.

#
# This is a basic milter for testing
#

import libmilter as lm
import sys , time
import syslog

#
# We are going to use an example of a forking version of our milter.  This is
# something not even possible with a regular libmilter implementation
#

# Create our milter class with the forking mixin and the regular milter
# protocol base classes
class TestMilter(lm.ForkMixin , lm.MilterProtocol):
    def __init__(self , opts=0 , protos=0):
        # We must init our parents here
        lm.MilterProtocol.__init__(self , opts , protos)
        lm.ForkMixin.__init__(self)
        lm.frAddr = ''
        lm.frAuthAddr = ''
        lm.From = None
        lm.fsSsf = None
        lm.flag = False
        # You can initialize more stuff here

    def log(self , msg):
        t = time.strftime('%H:%M:%S')
        syslog.openlog(logoption=syslog.LOG_PID, facility=syslog.LOG_MAIL)
        if self._qid is None:
            syslog.syslog('%s' % msg)
        else:
            syslog.syslog('%s: %s' % (self._qid , msg))
        sys.stdout.flush()


    @lm.noReply
    def connect(self , hostname , family , ip , port , cmdDict):
        self.log('Connect from %s:%d (%s) with family: %s' % (ip , port ,
            hostname , family))
        return lm.CONTINUE

    @lm.noReply
    def helo(self , heloname):
        self.log('HELO: %s' % heloname)
        return lm.CONTINUE

    @lm.noReply
    def mailFrom(self , frAddr , cmdDict):
#        self.log('MAIL: %s' % frAddr)
        return lm.CONTINUE

    @lm.noReply
    def mailAuthFrom(self , frAddr, frAuthAddr, frSsf , cmdDict):
        lm.frAddr = frAddr.lower()
        lm.frAuthAddr = frAuthAddr.lower()
        lm.frSsf = frSsf
        if frSsf == '0':
            lm.additional_addresses = get_allowedsmtpfrom(syslog, lm.frAuthAddr)
            lm.flag = lm.frAddr in lm.additional_addresses
            if lm.frAddr != lm.frAuthAddr and not lm.flag:
                self.setReply('554' , '5.7.1' , 'YOU ARE TRYING TO SPOOF YOUR REAL EMAIL ADDRESS - "Return-path" does not match "Mail-From"')
                self.log('ALERT: %s' % lm.frAuthAddr + ' is trying to change his/her e-mail address to %s' % lm.frAddr)
            if lm.flag:
                self.log('INFO: E-mail user ' + lm.frAuthAddr + ' set "Return-path" to ' + lm.frAddr + ' (allowed due to the presence of "additionlSMTPFrom" record in LDAP dn).')
           
        return lm.CONTINUE

    @lm.noReply
    def rcpt(self , recip , cmdDict):
#        self.log('RCPT: %s' % recip)
        return lm.CONTINUE

    @lm.noReply
    def header(self , key , val , cmdDict):
        if key == 'From':
            lm.From = val.lower()
            if not lm.frSsf is None:
                if lm.frSsf == '0':
                    if not lm.frAuthAddr in lm.From and not lm.flag:
                        self.setReply('554' , '5.7.1' , 'YOU ARE TRYING TO SPOOF YOUR REAL EMAIL ADDRESS - "Return-path" does not match "From" header')
                    if lm.flag:
                        self.log('INFO: E-mail user ' + lm.frAuthAddr + ' set "From" to ' + lm.frAddr + ' (allowed due to the presence of "additionlSMTPFrom" attribute in LDAP dn).')
        return lm.CONTINUE

    @lm.noReply
    def eoh(self , cmdDict):
        if not lm.frSsf is None:
            if lm.frSsf == '0' and lm.From is None:
                self.setReply('554' , '5.7.1' , 'YOU ARE TRYING TO SPOOF YOUR REAL EMAIL ADDRESS - Missing "From" header')
#        self.log('EOH')
        return lm.CONTINUE

    def data(self , cmdDict):
#        self.log('DATA')
        return lm.CONTINUE

    @lm.noReply
    def body(self , chunk , cmdDict):
#        self.log('Body chunk: %d' % len(chunk))
        return lm.CONTINUE

    def eob(self , cmdDict):
#        self.log('EOB')
        return lm.CONTINUE

    def close(self):
        self.log('Close called. QID: %s' % self._qid)

def runTestMilter():
    import signal , traceback
    # We can set our milter opts here
    opts = lm.SMFIF_CHGFROM | lm.SMFIF_ADDRCPT | lm.SMFIF_QUARANTINE

    # We initialize the factory we want to use (you can choose from an 
    # AsyncFactory, ForkFactory or ThreadFactory.  You must use the
    # appropriate mixin classes for your milter for Thread and Fork)
    f = lm.ForkFactory('inet:127.0.0.1:5000' , TestMilter , opts)
    def sigHandler(num , frame):
        f.close()
        sys.exit(0)
    signal.signal(signal.SIGINT , sigHandler)
    try:
        # run it
        f.run()
    except Exception , e:
        f.close()
        print >> sys.stderr , 'EXCEPTION OCCURED: %s' % e
        traceback.print_tb(sys.exc_traceback)
        sys.exit(3)


def get_allowedsmtpfrom(syslog, email):

    import ldap
    import os

    sys.path.append('/etc/mailfrom')

    import ldap_config

    # We do service only e-mail users, whose dn-objects contains:
    # uid = mailbox
    # mail = mailbox@domain.name
    # Get the uid and e-mail address first:

    if "@" in email:

        # Check if "@" is listed more than once within the "email" variable.
        # If true, then "email" does not resemble valid e-mail address.
        # Also, do reject the processing if the symbol "@" is first or last
        # symbol of "email":

        if email.count("@") > 1 or email.endswith("@") or email.index("@") == 0:
            return []

        else:

            # Get the user "uid" attrribute valie from the box name in the
            # "email" value, to speed up the LDAP lookup (the value of the
            # "domain" helps to start deep in the tree, instead of traversing
            # the entire tree):

            tmp = email.split("@")
            uid = tmp[0]
            domain = tmp[1]

        # Attempt to connect to the LDAP server:
        try:
            ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
            conn = ldap.initialize(ldap_config.ldap_uri)
            conn.set_option(ldap.OPT_REFERRALS, 0)
            conn.set_option(ldap.OPT_PROTOCOL_VERSION, 3)
            conn.set_option(ldap.OPT_X_TLS,ldap.OPT_X_TLS_DEMAND)
            conn.set_option(ldap.OPT_X_TLS_DEMAND, True )
            conn.set_option(ldap.OPT_DEBUG_LEVEL, 255 )
            conn.simple_bind_s(ldap_config.bind_dn, ldap_config.bind_password)
        except ldap.LDAPError, e:
            syslog.syslog(str(e))

        # Process "baseDN", by replacing there the uid (%u) and domain name (%d).

        baseDN = ldap_config.base_dn.replace("%d", domain)
        baseDN = baseDN.replace("%u", uid)

        searchFilter = "(&(&(objectclass=advancedsmtprelay)(uid=" + uid + "))(mail=" + email + "))"
        requested_attributes = ['allowedsmtpfrom']

        t = []

        try:
            ldap_result = conn.search(baseDN, ldap.SCOPE_SUBTREE, searchFilter, requested_attributes)
            result = []
            while True:
                result_type, result_data = conn.result(ldap_result, 0)
                if (result_data == []):
                    break
                else:
                    if result_type == ldap.RES_SEARCH_ENTRY:
                        result.append(result_data)
                t = result[0][0][1]['allowedsmtpfrom']
        except ldap.LDAPError, e:
            syslog.syslog(str(e))
            return []

        if len(t) > 0:
            for i in range(len(t)):
                t[i] = t[i].lower()

        return t

    else:
        syslog.syslog('Cannot process the requested e-mail address ' + email)
        return []


if __name__ == '__main__':
    runTestMilter()
